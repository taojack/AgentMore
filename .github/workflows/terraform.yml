name: terraform
on:
  pull_request:
    paths:
      - "terraform/**"
  issue_comment:

concurrency:
  group: ${{ github.ref }}

jobs:
  planning:
    if: ${{ github.event.pull_request }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Find folder where terraform files changed
        id: changed-folders
        run: |
          CHANGED_FOLDERS=$(git diff --name-only origin/${{ github.base_ref }} | grep "terraform/" | xargs -I {} dirname {} | uniq)
          echo "CHANGED_FOLDERS=$CHANGED_FOLDERS" >> $GITHUB_ENV
      
      - name: Workaround for Github actions to pull from private repos
        run: git config --global url."https://oauth2:${{ secrets.GRUBMARKET_BOT_PAT }}@github.com".insteadOf https://github.com

      - name: Terraform fmt
        id: fmt
        working-directory: ${{ env.CHANGED_FOLDERS }}
        run: terraform fmt -check
        continue-on-error: true
      
      - name: Terraform Init
        id: init
        working-directory: ${{ env.CHANGED_FOLDERS }}
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        working-directory: ${{ env.CHANGED_FOLDERS }}
        run: terraform validate -no-color
      
      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.CHANGED_FOLDERS }}
        run: terraform plan -no-color
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })
      
            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>
      
            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
      
            </details>
      
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      
            <details><summary>Show Plan</summary>
      
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
      
            </details>
      
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.CHANGED_FOLDERS }}\`, Workflow: \`${{ github.workflow }}\`*`;
      
            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
  
  deployment:
    if: contains(github.event.comment.body, '/deploy')
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          ref: refs/pull/${{ github.event.issue.number }}/head
          fetch-depth: 0

      - name: Workaround for Github actions to pull from private repos
        run: git config --global url."https://oauth2:${{ secrets.GRUBMARKET_BOT_PAT }}@github.com".insteadOf https://github.com

      - uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Find folder where terraform files changed
        id: changed-folders
        run: |
          CHANGED_FOLDERS=$(git diff --name-only origin/main | grep "terraform/" | xargs -I {} dirname {} | uniq)
          echo "CHANGED_FOLDERS=$CHANGED_FOLDERS" >> $GITHUB_ENV

      - name: Terraform Init
        working-directory: ${{ env.CHANGED_FOLDERS }}
        run: terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        
      - name: Terraform apply
        id: apply
        working-directory: ${{ env.CHANGED_FOLDERS }}
        run: terraform apply -no-color -auto-approve
        continue-on-error: true
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - uses: actions/github-script@v6
        if: contains(github.event.comment.body, '/deploy')
        env:
          APPLY: "terraform\n${{ steps.apply.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Apply Results')
            })
      
            // 2. Prepare format of the comment
            const output = `#### Terraform Apply Results:\`
            <details><summary>Apply output</summary>
      
            \`\`\`\n
            ${process.env.APPLY}
            \`\`\`
      
            </details>
      
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.CHANGED_FOLDERS }}\`, Workflow: \`${{ github.workflow }}\`*`;
      
            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }